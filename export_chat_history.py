#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
"""

import sqlite3
from datetime import datetime, timedelta
import pandas as pd
import os
from config import DatabaseConfig

def export_chat_history(days=7):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DatabaseConfig.DB_PATH)
        cursor = conn.cursor()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        start_date = datetime.now() - timedelta(days=days)
        start_date_str = start_date.strftime('%Y-%m-%d')
        
        print(f"üìä –í—ã–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π (—Å {start_date_str})")
        print("=" * 60)
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        query = """
        SELECT 
            u.username,
            u.telegram_id,
            m.role,
            m.message,
            m.created_at,
            DATE(m.created_at) as message_date
        FROM messages m
        JOIN users u ON m.user_id = u.id
        WHERE DATE(m.created_at) >= ?
        ORDER BY m.created_at DESC
        """
        
        cursor.execute(query, (start_date_str,))
        messages = cursor.fetchall()
        
        if not messages:
            print("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        df = pd.DataFrame(messages, columns=[
            'username', 'telegram_id', 'role', 'message', 'created_at', 'message_date'
        ])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:")
        daily_stats = df.groupby(['message_date', 'role']).size().unstack(fill_value=0)
        for date in daily_stats.index:
            user_msgs = daily_stats.loc[date, 'user'] if 'user' in daily_stats.columns else 0
            bot_msgs = daily_stats.loc[date, 'assistant'] if 'assistant' in daily_stats.columns else 0
            print(f"   üìÖ {date}: üë§ {user_msgs} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ü§ñ {bot_msgs} –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞")
        
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        print("üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        user_stats = df[df['role'] == 'user'].groupby(['username', 'telegram_id']).size().sort_values(ascending=False)
        for (username, telegram_id), count in user_stats.head(10).items():
            user_info = f"@{username}" if username else f"User {telegram_id}"
            print(f"   üë§ {user_info} (TG ID: {telegram_id}): {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        excel_filename = f"chat_history_{days}days_{timestamp}.xlsx"
        
        with pd.ExcelWriter(excel_filename, engine='openpyxl') as writer:
            # –õ–∏—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            df_export = df.copy()
            df_export['user_info'] = df_export.apply(
                lambda row: f"@{row['username']}" if row['username'] else f"User {row['telegram_id']}", 
                axis=1
            )
            df_export = df_export[['user_info', 'telegram_id', 'role', 'message', 'created_at']]
            df_export.to_excel(writer, sheet_name='–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è', index=False)
            
            # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –¥–Ω—è–º
            daily_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º')
            
            # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_stats_df = user_stats.reset_index()
            user_stats_df['user_info'] = user_stats_df.apply(
                lambda row: f"@{row['username']}" if row['username'] else f"User {row['telegram_id']}", 
                axis=1
            )
            user_stats_df = user_stats_df[['user_info', 'telegram_id', 0]]
            user_stats_df.columns = ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'Telegram ID', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']
            user_stats_df.to_excel(writer, sheet_name='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', index=False)
        
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª: {excel_filename}")
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {df['telegram_id'].nunique()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\nüí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π:")
        print("-" * 80)
        
        for _, msg in df.head(10).iterrows():
            role_emoji = "üë§" if msg['role'] == 'user' else "ü§ñ"
            user_info = f"@{msg['username']}" if msg['username'] else f"User {msg['telegram_id']}"
            short_content = msg['message'][:100] + "..." if len(msg['message']) > 100 else msg['message']
            
            print(f"{role_emoji} [{msg['created_at']}] {user_info}")
            print(f"   üí¨ {short_content}")
            print("-" * 40)
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    days_to_export = 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
    
    print("üîÑ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤...")
    export_chat_history(days_to_export)