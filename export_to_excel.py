#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª
"""

import os
import sys
import sqlite3
from datetime import datetime
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import DatabaseConfig

def export_messages_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Excel —Ñ–∞–π–ª"""
    
    print("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Excel...")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DatabaseConfig.DB_PATH, timeout=10.0)
        cursor = conn.cursor()
        
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        query = """
        SELECT 
            u.telegram_id,
            u.username,
            m.role,
            m.message,
            m.created_at,
            DATE(m.created_at) as message_date,
            TIME(m.created_at) as message_time
        FROM messages m
        JOIN users u ON m.user_id = u.id
        ORDER BY m.created_at ASC
        """
        
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...")
        cursor.execute(query)
        messages = cursor.fetchall()
        
        if not messages:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(messages, columns=[
            'Telegram_ID', 'Username', 'Role', 'Message', 
            'Full_DateTime', 'Date', 'Time'
        ])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df['Username'] = df['Username'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        df['Role_RU'] = df['Role'].map({'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'assistant': '–ë–æ—Ç'})
        df['Message_Length'] = df['Message'].str.len()
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        filename = f"chat_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        filepath = os.path.join(os.getcwd(), filename)
        
        print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞: {filename}")
        
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            df_export = df[['Telegram_ID', 'Username', 'Role_RU', 'Message', 'Date', 'Time', 'Message_Length']]
            df_export.to_excel(writer, sheet_name='–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è', index=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_stats = df.groupby(['Telegram_ID', 'Username']).agg({
                'Message': 'count',
                'Message_Length': 'mean',
                'Date': ['min', 'max']
            }).round(2)
            user_stats.columns = ['–í—Å–µ–≥–æ_—Å–æ–æ–±—â–µ–Ω–∏–π', '–°—Ä–µ–¥–Ω—è—è_–¥–ª–∏–Ω–∞', '–ü–µ—Ä–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ']
            user_stats.reset_index().to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', index=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            daily_stats = df.groupby(['Date', 'Role_RU']).size().unstack(fill_value=0)
            daily_stats['–í—Å–µ–≥–æ'] = daily_stats.sum(axis=1)
            daily_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
            workbook = writer.book
            worksheet = writer.sheets['–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è']
            
            # –°—Ç–∏–ª–∏
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            user_fill = PatternFill(start_color="E8F4FD", end_color="E8F4FD", fill_type="solid")
            bot_fill = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            for cell in worksheet[1]:
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º
            for row in range(2, len(df_export) + 2):
                role = worksheet[f'C{row}'].value
                if role == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
                    for col in range(1, 8):
                        worksheet.cell(row=row, column=col).fill = user_fill
                elif role == '–ë–æ—Ç':
                    for col in range(1, 8):
                        worksheet.cell(row=row, column=col).fill = bot_fill
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_messages = len(messages)
        user_messages = len(df[df['Role'] == 'user'])
        bot_messages = len(df[df['Role'] == 'assistant'])
        unique_users = df['Telegram_ID'].nunique()
        date_range = f"{df['Date'].min()} - {df['Date'].max()}"
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        print(f"   üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
        print(f"   üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_messages}")
        print(f"   ü§ñ –û—Ç –±–æ—Ç–∞: {bot_messages}")
        print(f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {date_range}")
        print(f"\n‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        
        conn.close()
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        return None

def create_summary_report():
    """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–æ—Ä—Ç—É"""
    
    try:
        conn = sqlite3.connect(DatabaseConfig.DB_PATH, timeout=10.0)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM messages")
        total_messages = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE role = 'user'")
        user_messages = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE role = 'assistant'")
        bot_messages = cursor.fetchone()[0]
        
        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
        SELECT u.username, u.telegram_id, COUNT(m.id) as msg_count
        FROM users u
        JOIN messages m ON u.id = m.user_id
        GROUP BY u.id
        ORDER BY msg_count DESC
        LIMIT 5
        """)
        top_users = cursor.fetchall()
        
        print("\n" + "="*60)
        print("üìã –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –ü–û –≠–ö–°–ü–û–†–¢–£")
        print("="*60)
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_messages}")
        print(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞: {bot_messages}")
        
        print(f"\nüëë –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for i, (username, telegram_id, msg_count) in enumerate(top_users, 1):
            print(f"   {i}. @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {telegram_id}) - {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Excel")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    excel_file = export_messages_to_excel()
    
    if excel_file:
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        create_summary_report()
        
        print(f"\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –§–∞–π–ª: {excel_file}")
    else:
        print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")