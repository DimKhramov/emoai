# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram —á–µ—Ä–µ–∑ aiogram

import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from services.intents import determine_intent
from services.journal import create_journal_entry
from services.microsteps import MICROSTEPS
from storage.db import (
    initialize_database, add_user, get_user_by_telegram_id, 
    is_new_user, add_message, get_conversation_history, 
    clear_conversation_history, get_user_stats
)
from services.gpt_service import chat_with_gpt

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")

if not API_TOKEN:
    raise ValueError("TELEGRAM_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_database()

def ensure_user_initialized(user_id: int, username: str = None, first_name: str = None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if is_new_user(user_id):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_user(username or first_name or f"user_{user_id}", user_id)
        return True  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    return False  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

# –§—É–Ω–∫—Ü–∏—è save_user_data –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

def load_user_data(user_id: int):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return get_user_by_telegram_id(user_id)

def add_to_conversation_history(user_id: int, role: str, content: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user_by_telegram_id(user_id)
    if user:
        add_message(user['id'], content, role)

@dp.message(Command('start'))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new = ensure_user_initialized(user_id, username, first_name)
    
    if is_new:
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}!\n\n" \
                      "–Ø —Ç–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫ –¥–µ–ª–∞, " \
                      "—á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å! üòä\n\n" \
                      "–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö."
    else:
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name or '–¥—Ä—É–≥'}!\n\n" \
                      "–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –¥–µ–ª–∞? üòä"
    
    await message.answer(welcome_text)

@dp.message(Command('help'))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n" \
               "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n" \
               "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" \
               "‚Ä¢ /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" \
               "‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞\n" \
               "‚Ä¢ /test_reminder - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n" \
               "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É! üòä\n\n" \
               "üîî **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è!"
    
    await message.answer(help_text, parse_mode='Markdown')

@dp.message(Command('stats'))
async def stats_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user_by_telegram_id(user_id)
    
    if user:
        stats = get_user_stats(user['id'])
        stats_text = f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n" \
                    f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['message_count']}\n" \
                    f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user['created_at']}\n" \
                    f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    else:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start!"
    
    await message.answer(stats_text, parse_mode='Markdown')

@dp.message(Command('clear'))
async def clear_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user_by_telegram_id(user_id)
    
    if user:
        clear_conversation_history(user['id'])
        await message.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏. –ù–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start!")

@dp.message(Command('test_reminder'))
async def test_reminder_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_reminder - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–∑ app.py
    from app import scheduler
    
    if scheduler:
        success = await scheduler.send_test_reminder(user_id)
        if success:
            await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        await message.reply("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")

async def get_gpt_response(user_id: int, user_message: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user = get_user_by_telegram_id(user_id)
    conversation_history = get_conversation_history(user['id']) if user else []
    gpt_history = [{'role': msg['role'], 'content': msg['content']} for msg in conversation_history]
    return await chat_with_gpt(user_message, conversation_history=gpt_history)

async def handle_talk_intent(message: Message, user_id: int, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–∞ talk"""
    response = await get_gpt_response(user_id, user_message)
    if not response:
        response = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? üòä –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ!"
    await message.reply(response)
    add_to_conversation_history(user_id, 'assistant', response)

async def handle_other_intent(message: Message, user_id: int, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤"""
    response = await get_gpt_response(user_id, user_message)
    if not response:
        response = "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ. ü§ó"
    await message.reply(response)
    add_to_conversation_history(user_id, 'assistant', response)

async def handle_simple_intent(message: Message, user_id: int, intent: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    responses = {
        "coach": "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? ü§ó",
        "facts": "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å:\n\n" + "\n".join([f"‚Ä¢ {step}" for step in MICROSTEPS[:3]]),
        "journal": "–î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫! üìî\n\n–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 10? –ò —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Å–µ–≥–æ–¥–Ω—è?",
        "sos": """üÜò –¢—ã –Ω–µ –æ–¥–∏–Ω, —è —Ä—è–¥–æ–º! 

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å:
üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122
üöë –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã: 112

–ê –ø–æ–∫–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –Ø –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂—É! üíô"""
    }
    
    response = responses.get(intent, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ü§ó")
    await message.reply(response)
    add_to_conversation_history(user_id, 'assistant', response)

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_message = message.text
    
    if not user_message:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üìù")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ensure_user_initialized(user_id, message.from_user.username, message.from_user.first_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_to_conversation_history(user_id, 'user', user_message)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    intent = determine_intent(user_message)
    
    try:
        if intent == "talk":
            await handle_talk_intent(message, user_id, user_message)
        elif intent in ["coach", "facts", "journal", "sos"]:
            await handle_simple_intent(message, user_id, intent)
        else:
            await handle_other_intent(message, user_id, user_message)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        error_response = "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòÖ"
        await message.reply(error_response)
        add_to_conversation_history(user_id, 'assistant', error_response)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())