# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram —á–µ—Ä–µ–∑ aiogram

import os
import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, PreCheckoutQuery, LabeledPrice, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import LimitsConfig, PremiumConfig, SchedulerConfig, OpenAIConfig
from services.intents import determine_intent
from services.microsteps import MICROSTEPS
from storage.db import (
    initialize_database, add_user, get_user_by_telegram_id, 
    is_new_user, add_message, get_conversation_history, 
    clear_conversation_history, get_user_stats,
    check_daily_message_limit, increment_daily_message_count, get_daily_message_count,
    get_user_premium_status, activate_premium_subscription
)
from services.gpt_service import (
    chat_with_gpt, detect_emotion_keywords, get_openai_client
)
from payment_manager import create_star_invoice, process_successful_payment, get_user_payment_info, PaymentManager, send_premium_offer, send_premium_reminder, get_premium_stats
from handlers.preferences import router as preferences_router

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")

if not API_TOKEN:
    raise ValueError("TELEGRAM_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(preferences_router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initialize_database()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
SIMPLE_INTENT_TEXTS = {
    'greeting': "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ!",
    'goodbye': "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!",
    'gratitude': "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è - –æ–±—Ä–∞—â–∞–π—Å—è!",
    'compliment': "üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞! –ú–Ω–µ —Ç–æ–∂–µ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è!",
    'weather': "üå§Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É, –Ω–æ –º–æ–≥—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–≥–æ–¥–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
    'time': "‚è∞ –Ø –Ω–µ –∑–Ω–∞—é —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–Ω—è –∏–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–º —Å–º—ã—Å–ª–µ!"
}

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
ADDITIONAL_INTENT_TEXTS = {
    "coach": "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? ü§ó",
    "facts": "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å:\n\n" + "\n".join([f"‚Ä¢ {step}" for step in MICROSTEPS[:3]]),
    "journal": "–î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫! üìî\n\n–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 10? –ò —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Å–µ–≥–æ–¥–Ω—è?",
    "sos": """üÜò –¢—ã –Ω–µ –æ–¥–∏–Ω, —è —Ä—è–¥–æ–º! 

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å:
üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122
üöë –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã: 112

–ê –ø–æ–∫–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –Ø –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂—É! üíô"""
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def render_welcome(is_new: bool, first_name: str | None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = first_name or '–¥—Ä—É–≥'
    
    if is_new:
        return (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
            "–Ø —Ç–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫ –¥–µ–ª–∞, "
            "—á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å! üòä\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö."
        )
    else:
        return (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\n"
            "–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –¥–µ–ª–∞? üòä"
        )

def render_welcome_detailed(first_name: str | None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ handle_message"""
    return (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥—Ä—É–≥-–±–æ—Ç.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã\n"
        "‚Ä¢ üéØ –î–∞—Ç—å —Å–æ–≤–µ—Ç –∫–∞–∫ –∫–æ—É—á\n"
        "‚Ä¢ üìö –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏\n"
        "‚Ä¢ üìù –ü–æ–º–æ—á—å —Å –≤–µ–¥–µ–Ω–∏–µ–º –¥–Ω–µ–≤–Ω–∏–∫–∞\n"
        "‚Ä¢ üÜò –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä\n\n"
        "üìä /stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üóëÔ∏è /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞\n"
        "‚≠ê /premium - –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞"
    )

def format_premium_line(premium_info) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–µ"""
    if premium_info and premium_info['premium_status']:
        return f"üëë –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if premium_info['premium_status'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {premium_info['subscription_end_date']}"
    else:
        return "üëë –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

def render_premium_status_text(premium_info) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    if premium_info and premium_info['premium_status']:
        auto_renewal_status = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if premium_info.get('auto_renewal', False) else "–æ—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå"
        return (
            f"‚≠ê –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {premium_info['subscription_end_date']}\n"
            f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {auto_renewal_status}\n\n"
            f"üéØ –ü—Ä–µ–º–∏—É–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π:"
        )
    else:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."

def kb_back_to_main() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

async def safe_delete(message: Message) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await message.delete()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def check_and_increment_daily_limit(user_id: int, message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    premium_info = get_user_premium_status(user_id)
    if premium_info and premium_info['premium_status']:
        # –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        return True
    
    if not check_daily_message_limit(user_id):
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
        limit_message = "–ü–æ—Ö–æ–∂–µ, —Ç—ã –¥–æ—Å—Ç–∏–≥(–ª–∞) –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (20/20). –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º ‚Äî –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ?"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="buy_premium_monthly")],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="check_balance")]
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
        full_message = f"üí™ {limit_message}"
        
        await message.answer(full_message, reply_markup=keyboard)
        return False
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    increment_daily_message_count(user_id)
    return True

async def send_premium_invoice(user_id: int, days: int, price: int, title: str, description: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        invoice = create_star_invoice(
            title=title,
            description=description,
            payload=f"premium_{days}_{user_id}",
            star_count=price
        )
        
        await bot.send_invoice(
            chat_id=user_id,
            title=invoice['title'],
            description=invoice['description'],
            payload=invoice['payload'],
            provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
            currency="XTR",  # Telegram Stars
            prices=[LabeledPrice(label=title, amount=invoice['star_count'])]
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        return False

async def reply_with_text_and_log(message: Message, user_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    await message.reply(text)
    add_to_conversation_history(user_id, "assistant", text)

async def reply_with_gpt(message: Message, user_id: int, user_message: str, fallback_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GPT –æ—Ç–≤–µ—Ç —Å typing action –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    await send_typing_action(message.chat.id)
    
    gpt_response = await get_gpt_response(user_id, user_message)
    if not gpt_response:
        gpt_response = fallback_text
    
    await message.reply(gpt_response)
    add_to_conversation_history(user_id, "assistant", gpt_response)

def ensure_user_initialized(user_id: int, username: str = None, first_name: str = None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if is_new_user(user_id):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = add_user(username or first_name or f"user_{user_id}", user_id)
        if result > 0:
            return True  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    return False  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

# –§—É–Ω–∫—Ü–∏—è save_user_data –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

def add_to_conversation_history(user_id: int, role: str, content: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user_by_telegram_id(user_id)
    if user:
        add_message(user['id'], content, role)

@dp.message(Command('start'))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new = ensure_user_initialized(user_id, username, first_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = render_welcome(is_new, first_name)
    
    await message.answer(welcome_text)

@dp.message(Command('help'))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" \
               f"‚Ä¢ /start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n" \
               f"‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" \
               f"‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—â–µ–Ω–∏—è\n" \
               f"‚Ä¢ /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" \
               f"‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞\n" \
               f"‚Ä¢ /premium - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ\n" \
               f"‚Ä¢ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥\n" \
               f"‚Ä¢ /test_reminder - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n" \
               f"üí¨ –û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º:\n" \
               f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É! üòä\n\n" \
               f"üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {SchedulerConfig.DAILY_REMINDER_TIME.strftime('%H:%M')} —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è!\n\n" \
               f"üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n" \
               f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ–± —ç—Ç–æ–º! " \
               f"–Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. üõ†Ô∏è"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(help_text, reply_markup=keyboard)

@dp.message(Command('stats'))
async def stats_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user_by_telegram_id(user_id)
    
    if user:
        stats = get_user_stats(user['id'])
        daily_count = get_daily_message_count(user_id)
        premium_info = get_user_premium_status(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n" \
                    f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['message_count']}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if premium_info and premium_info['premium_status']:
            stats_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_count} (–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ ‚≠ê)\n"
        else:
            stats_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_count}/{LimitsConfig.DAILY_MESSAGE_LIMIT}\n"
            
        stats_text += f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user['created_at']}\n" \
                     f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–µ
        premium_line = format_premium_line(premium_info)
        stats_text += f"\n{premium_line}"
    else:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start!"
    
    await message.answer(stats_text)

@dp.message(Command('clear'))
async def clear_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user_by_telegram_id(user_id)
    
    if user:
        clear_conversation_history(user['id'])
        await message.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏. –ù–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start!")

@dp.message(Command('test_reminder'))
async def test_reminder_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_reminder - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–∑ app.py
    from app import scheduler
    
    if scheduler:
        success = await scheduler.send_test_reminder(user_id)
        if success:
            await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        await message.reply("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")

@dp.message(Command('premium'))
async def premium_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    premium_info = get_user_premium_status(user_id)
    
    if premium_info and premium_info['premium_status']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º
        status_text = render_premium_status_text(premium_info)
        await message.answer(status_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    await send_premium_offer(bot, user_id)

@dp.message(Command('buy_premium'))
async def buy_premium_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy_premium - –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    success = await send_premium_invoice(
        user_id=user_id,
        days=PremiumConfig.MONTHLY_DAYS,
        price=PremiumConfig.MONTHLY_PRICE,
        title="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞",
        description=f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {PremiumConfig.MONTHLY_DAYS} –¥–Ω–µ–π - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    )
    
    if not success:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command('balance'))
async def balance_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥"""
    user_id = message.from_user.id
    
    payment_info = get_user_payment_info(user_id)
    
    if payment_info:
        premium_line = format_premium_line(payment_info)
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n{premium_line}")
    else:
        await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–º–∏—É–º–∞
@dp.callback_query(lambda c: c.data.startswith('buy_premium_'))
async def handle_premium_purchase(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    user_id = callback_query.from_user.id
    plan = callback_query.data.split('_')[-1]  # daily, weekly, monthly
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
    plan_info = {
        'daily': {'days': PremiumConfig.DAILY_DAYS, 'stars': PremiumConfig.DAILY_PRICE, 'title': '–ü—Ä–µ–º–∏—É–º –Ω–∞ –¥–µ–Ω—å'},
        'weekly': {'days': PremiumConfig.WEEKLY_DAYS, 'stars': PremiumConfig.WEEKLY_PRICE, 'title': '–ü—Ä–µ–º–∏—É–º –Ω–∞ –Ω–µ–¥–µ–ª—é'},
        'monthly': {'days': PremiumConfig.MONTHLY_DAYS, 'stars': PremiumConfig.MONTHLY_PRICE, 'title': '–ü—Ä–µ–º–∏—É–º –Ω–∞ –º–µ—Å—è—Ü'}
    }
    
    if plan not in plan_info:
        await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    info = plan_info[plan]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
    success = await send_premium_invoice(
        user_id=user_id,
        days=info['days'],
        price=info['stars'],
        title=info['title'],
        description=f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {info['days']} –¥–Ω. - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    )
    
    if success:
        await callback_query.answer("üí´ –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞")

@dp.callback_query(lambda c: c.data == 'check_balance')
async def handle_check_balance(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user_id = callback_query.from_user.id
    
    payment_info = get_user_payment_info(user_id)
    
    if payment_info:
        balance_text = (
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n"
            f"üëë –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if payment_info['premium_status'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {payment_info['subscription_end_date'] or '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback_query.message.edit_text(balance_text, reply_markup=keyboard)
        await callback_query.answer("üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        await callback_query.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

@dp.callback_query(lambda c: c.data == 'toggle_auto_renewal')
async def handle_toggle_auto_renewal(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    user_info = get_user_payment_info(user_id)
    if not user_info:
        await callback_query.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    current_auto_renewal = user_info.get('auto_renewal', False)
    new_auto_renewal = not current_auto_renewal
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä PaymentManager –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    payment_manager = PaymentManager()
    success = await payment_manager.toggle_auto_renewal(user_id, new_auto_renewal)
    
    if success:
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if new_auto_renewal else "–æ—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå"
        await callback_query.answer(f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        await send_premium_offer(bot, user_id)
        await callback_query.message.delete()
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è")

@dp.callback_query(lambda c: c.data == 'back_to_main')
async def handle_back_to_main(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    user_id = callback_query.from_user.id
    first_name = callback_query.from_user.first_name
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await safe_delete(callback_query.message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = render_welcome(is_new=False, first_name=first_name)
    
    await callback_query.message.answer(welcome_text)
    await callback_query.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(lambda message: message.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = message.from_user.id
    payment = message.successful_payment
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞
    total_amount = payment.total_amount
    days = LimitsConfig.DEFAULT_SUBSCRIPTION_DAYS  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if total_amount == PremiumConfig.DAILY_PRICE:
        days = PremiumConfig.DAILY_DAYS
    elif total_amount == PremiumConfig.WEEKLY_PRICE:
        days = PremiumConfig.WEEKLY_DAYS
    elif total_amount == PremiumConfig.MONTHLY_PRICE:
        days = PremiumConfig.MONTHLY_DAYS
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    success = process_successful_payment(user_id, payment.telegram_payment_charge_id, total_amount)
    
    if success:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
        # activate_premium_subscription —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        activate_premium_subscription(user_id, days)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        if days == PremiumConfig.DAILY_DAYS:
            period_text = f"{PremiumConfig.DAILY_DAYS} –¥–µ–Ω—å"
        elif days == PremiumConfig.WEEKLY_DAYS:
            period_text = f"{PremiumConfig.WEEKLY_DAYS} –¥–Ω–µ–π"
        else:
            period_text = f"{PremiumConfig.MONTHLY_DAYS} –¥–Ω–µ–π"
            
        await message.answer(
            f"üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            f"‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {period_text}\n"
            f"üöÄ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /premium –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."
        )

async def get_gpt_response(user_id: int, user_message: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user = get_user_by_telegram_id(user_id)
    conversation_history = get_conversation_history(user['id']) if user else []
    gpt_history = [{'role': msg['role'], 'content': msg['content']} for msg in conversation_history]
    return await chat_with_gpt(user_message, conversation_history=gpt_history)

async def send_typing_action(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ø–µ—á–∞—Ç–∞–µ—Ç' –≤ —á–∞—Ç"""
    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ typing action: {e}")

async def handle_talk_intent(message: Message, user_id: int, user_message: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ–Ω—Ç 'talk' - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    await send_typing_action(message.chat.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    emotion_type = detect_emotion_keywords(user_message)
    
    if emotion_type == "sos":
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        response = """üÜò –¢—ã –Ω–µ –æ–¥–∏–Ω, —è —Ä—è–¥–æ–º! üíõ

–ï—Å–ª–∏ –µ—Å—Ç—å —É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏ ‚Äî –ø–æ–∑–≤–æ–Ω–∏ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
–°–≤—è–∂–∏—Å—å —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä—è–¥–æ–º.

–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º 5 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤: –≤–¥–æ—Ö –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 6. ü§ç

–¢—ã —Å–µ–π—á–∞—Å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?"""
        
        await reply_with_text_and_log(message, user_id, response)
        return
    
    elif emotion_type == "neutral":
        # –î–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        try:
            client = get_openai_client()
            
            prompt = f"""–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{user_message}"

–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
–û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–∞, –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –¥–æ–±—Ä—ã–º. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 1-2 —ç–º–æ–¥–∑–∏.

–û—Ç–≤–µ—Ç:"""

            response = client.chat.completions.create(
                model=OpenAIConfig.MODEL,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=OpenAIConfig.MAX_TOKENS,
                temperature=OpenAIConfig.TEMPERATURE
            )
            
            gpt_response = response.choices[0].message.content.strip()
            await reply_with_text_and_log(message, user_id, gpt_response)
            return
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º –æ—Ç–≤–µ—Ç–∞–º
            neutral_responses = [
                "–ü–æ–Ω–∏–º–∞—é! üòä –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?",
                "–•–æ—Ä–æ—à–æ! üëç –ö–∞–∫ –¥–µ–ª–∞ –≤–æ–æ–±—â–µ?",
                "–Ø—Å–Ω–æ! üòå –ê —á—Ç–æ –µ—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
            ]
            response = random.choice(neutral_responses)
            await reply_with_text_and_log(message, user_id, response)
            return
    
    # –î–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if emotion_type == "anger":
        opener = "–ü–æ—Ö–æ–∂–µ, —Ç–µ–±—è —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≤–∑–±–µ—Å–∏–ª–æ üò§"
        followup = "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±–µ—Å–∏—Ç —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ?"
    elif emotion_type == "sadness":
        opener = "–ó–≤—É—á–∏—Ç, –±—É–¥—Ç–æ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ üòû"
        followup = "–û —á—ë–º —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç–æ—Å–∫–∞?"
    elif emotion_type == "tired":
        opener = "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—Å—ë –¥–æ—Å—Ç–∞–ª–æ üò©"
        followup = "–ì–¥–µ –æ—Å–Ω–æ–≤–Ω–∞—è —É—Ç–µ—á–∫–∞ —Å–∏–ª?"
    elif emotion_type == "generic":
        # –î–ª—è generic —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        try:
            client = get_openai_client()
            
            prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_message}"

–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
–û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –¥–æ–±—Ä—ã–º. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 1-2 —ç–º–æ–¥–∑–∏.
–ù–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—á–µ–≤–∏–¥–Ω—ã.

–û—Ç–≤–µ—Ç:"""

            response = client.chat.completions.create(
                model=OpenAIConfig.MODEL,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=OpenAIConfig.MAX_TOKENS,
                temperature=OpenAIConfig.TEMPERATURE
            )
            
            gpt_response = response.choices[0].message.content.strip()
            await reply_with_text_and_log(message, user_id, gpt_response)
            return
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è generic —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º –æ—Ç–≤–µ—Ç–∞–º
            generic_responses = [
                "–ü–æ–Ω–∏–º–∞—é! üòä –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?",
                "–•–æ—Ä–æ—à–æ! üëç –ö–∞–∫ –¥–µ–ª–∞ –≤–æ–æ–±—â–µ?",
                "–Ø—Å–Ω–æ! üòå –ê —á—Ç–æ –µ—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
            ]
            response = random.choice(generic_responses)
            await reply_with_text_and_log(message, user_id, response)
            return
    else:
        # –¢–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (anger, sadness, tired)
        opener = "–ü–æ—Ö–æ–∂–µ, —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–µ–ø—Ä–æ—Å—Ç–æ üòî"
        followup = "–•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?"
    
    # –ü—Ä–æ—Å—Ç—ã–µ –º–∏–∫—Ä–æ-—à–∞–≥–∏
    micro_steps = [
        "–°–¥–µ–ª–∞–π 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞ –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã–¥–æ—Ö–∏",
        "–í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏", 
        "–í—ã–π–¥–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–æ–∑–¥—É—Ö –∏–ª–∏ –∫ –æ–∫–Ω—É",
        "–ü–æ—Ç—è–Ω–∏—Å—å: –ø–ª–µ—á–∏ –Ω–∞–∑–∞–¥, —à–µ—è ‚Äî –º—è–≥–∫–æ, 30 —Å–µ–∫—É–Ω–¥"
    ]
    micro_step = random.choice(micro_steps)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã
    closers = ["–•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ?", "–û–∫?", "–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?"]
    closer = random.choice(closers)
    
    response = f"""{opener}

{followup}

üëâ **{micro_step}**

{closer} üíõ"""
    
    await reply_with_text_and_log(message, user_id, response)

async def handle_other_intent(message: Message, user_id: int, user_message: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ–Ω—Ç—ã (coach, facts, journal)"""
    intent = determine_intent(user_message)
    
    if intent == "coach":
        response = """üí™ –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞!

–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º:
‚Ä¢ –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –≤ —Ç–≤–æ—ë–º –∫–æ–Ω—Ç—Ä–æ–ª–µ –∏ —á—Ç–æ –≤–Ω–µ –µ–≥–æ
‚Ä¢ –í—ã–±–µ—Ä–∏ 1 —à–∞–≥ –Ω–∞ 5‚Äì10 –º–∏–Ω—É—Ç ‚Äî —Å–¥–µ–ª–∞–π –µ–≥–æ –∏ –≤–µ—Ä–Ω–∏—Å—å

–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? ü§ó"""
        
    elif intent == "facts":
        response = """üìò –ö–æ—Ä–æ—Ç–∫–æ –ø–æ –¥–µ–ª—É:

‚Ä¢ –°–¥–µ–ª–∞–π 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞ –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã–¥–æ—Ö–∏
‚Ä¢ –í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏
‚Ä¢ –í—ã–π–¥–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–æ–∑–¥—É—Ö –∏–ª–∏ –∫ –æ–∫–Ω—É

–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç?"""
        
    elif intent == "journal":
        response = """üìì –î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫! üí≠

‚Ä¢ –û—Ü–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 10
‚Ä¢ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–æ? 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∞–∫—Ç–∞
‚Ä¢ –ó–∞ —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω(–Ω–∞) —Å–µ–≥–æ–¥–Ω—è? (1 —Å—Ç—Ä–æ–∫–∞)
‚Ä¢ –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞

–ù–∞—á–Ω–∏ —Å –ª—é–±–æ–≥–æ –ø—É–Ω–∫—Ç–∞! üåø"""
        
    else:
        # Fallback
        response = await get_gpt_response(user_id, user_message)
    
    await reply_with_text_and_log(message, user_id, response)

async def handle_unified_message(message: Message, user_id: int, user_message: str):
    """–ï–¥–∏–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ GPT —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    await send_typing_action(message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º—ã
    from services.content_filter import ContentFilter
    is_inappropriate, topic_type, safe_response = ContentFilter.check_content(user_message)
    
    if is_inappropriate:
        print(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {topic_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await reply_with_text_and_log(message, user_id, safe_response)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    from storage.db import get_user_preferences
    user_preferences = get_user_preferences(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    from config import LimitsConfig
    from services.emotional_context import format_context_for_gpt
    
    context_limit = LimitsConfig.CONTEXT_MESSAGE_LIMIT
    history = get_conversation_history(user_id, limit=context_limit)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_analysis, intent, response_tone, context_addition = format_context_for_gpt(history, user_message)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    context_messages = []
    for msg in history[-context_limit:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        role = "user" if msg['role'] == 'user' else "assistant"
        context_messages.append({"role": role, "content": msg['content']})
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context_messages.append({"role": "user", "content": user_message})
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
        response = await get_gpt_response_with_context(context_messages, intent, response_tone, context_addition, user_preferences)
        await reply_with_text_and_log(message, user_id, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {e}")
        # Fallback –æ—Ç–≤–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        emotional_state = context_analysis.get('emotional_state', 'neutral')
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ fallback –æ—Ç–≤–µ—Ç–∞—Ö
        emoji_suffix = "" if not user_preferences.get('use_emojis', True) else " üíô"
        
        if emotional_state == 'negative':
            fallback_responses = [
                f"–ü–æ–Ω–∏–º–∞—é, —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–µ–ø—Ä–æ—Å—Ç–æ...{emoji_suffix}",
                f"–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è{emoji_suffix}",
                f"–ß—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ. –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?{emoji_suffix}"
            ]
        elif emotional_state == 'positive':
            fallback_responses = [
                f"–ó–¥–æ—Ä–æ–≤–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ!{emoji_suffix}",
                f"–ö–ª–∞—Å—Å–Ω–æ! –ß—Ç–æ —Ç–µ–±—è —Ç–∞–∫ —Ä–∞–¥—É–µ—Ç?{emoji_suffix}",
                f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–µ–ª–∏—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏!{emoji_suffix}"
            ]
        else:
            fallback_responses = [
                f"–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ?{emoji_suffix}",
                f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?{emoji_suffix}",
                f"–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è{emoji_suffix}"
            ]
        response = random.choice(fallback_responses)
        await reply_with_text_and_log(message, user_id, response)

async def get_gpt_response_with_context(context_messages, intent=None, response_tone=None, context_addition="", user_preferences=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    client = get_openai_client()
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞
    if intent in ['support', 'sos', 'emotional']:
        prompt_file = 'prompts/empathic_prompt.txt'
    elif intent in ['question', 'facts', 'advice', 'weather', 'time']:
        prompt_file = 'prompts/factual_prompt.txt'
    else:
        prompt_file = 'prompts/system_prompt.txt'
    
    # –ß–∏—Ç–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    with open(prompt_file, 'r', encoding='utf-8') as f:
        system_prompt = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫ –ø—Ä–æ–º–ø—Ç—É
    if user_preferences:
        preferences_text = ""
        if not user_preferences.get('use_emojis', True):
            preferences_text += "\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö."
        
        style = user_preferences.get('communication_style', 'friendly')
        if style == 'formal':
            preferences_text += "\nüìù –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π, –±–µ–∑ —Å–ª–µ–Ω–≥–∞."
        elif style == 'casual':
            preferences_text += "\nüòé –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥."
        
        length = user_preferences.get('preferred_response_length', 'medium')
        if length == 'short':
            preferences_text += "\nüìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: –∫—Ä–∞—Ç–∫–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."
        elif length == 'long':
            preferences_text += "\nüìñ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: –ø–æ–¥—Ä–æ–±–Ω—ã–µ (–º–æ–∂–Ω–æ –±–æ–ª—å—à–µ 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)."
        
        if preferences_text:
            system_prompt += preferences_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
    if context_addition:
        system_prompt += f"\n\n{context_addition}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–Ω–µ –æ—Ç–≤–µ—Ç–∞
    if response_tone:
        system_prompt += f"\n\n–¢–æ–Ω –æ—Ç–≤–µ—Ç–∞: {response_tone}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ–Ω—Ç–µ
    if intent:
        system_prompt += f"\n\n–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {intent}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
    messages = [{"role": "system", "content": system_prompt}] + context_messages
    
    response = client.chat.completions.create(
        model=OpenAIConfig.MODEL,
        messages=messages,
        max_tokens=OpenAIConfig.MAX_TOKENS,
        temperature=OpenAIConfig.TEMPERATURE
    )
    
    return response.choices[0].message.content.strip()

async def handle_simple_intent(message: Message, user_id: int, intent: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await send_typing_action(message.chat.id)
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    all_intent_texts = {**SIMPLE_INTENT_TEXTS, **ADDITIONAL_INTENT_TEXTS}
    response = all_intent_texts.get(intent, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ü§ó")
    
    await reply_with_text_and_log(message, user_id, response)

@dp.message()
async def handle_message(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    user_message = message.text
    
    if not user_message:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üìù")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
    is_new = ensure_user_initialized(user_id, username, first_name)
    
    if is_new:
        welcome_message = render_welcome_detailed(first_name)
        await message.reply(welcome_message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    can_proceed = await check_and_increment_daily_limit(user_id, message)
    if not can_proceed:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_to_conversation_history(user_id, 'user', user_message)
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ GPT –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    try:
        await handle_unified_message(message, user_id, user_message)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        error_response = "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòÖ"
        await message.reply(error_response)
        add_to_conversation_history(user_id, 'assistant', error_response)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())