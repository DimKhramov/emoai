import os
import random
from openai import OpenAI
from dotenv import load_dotenv
from pathlib import Path
import asyncio
from config import OpenAIConfig
from .dynamic_response import get_response_config, analyze_conversation_context, get_style_instructions, format_response_config_info

load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI
_openai_client = None

def get_openai_client():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI"""
    global _openai_client
    if _openai_client is None:
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        _openai_client = OpenAI(
            api_key=api_key,
            timeout=OpenAIConfig.TIMEOUT
        )
    return _openai_client



def detect_emotion_keywords(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GPT"""
    try:
        client = get_openai_client()
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:
- sos (–µ—Å–ª–∏ –µ—Å—Ç—å —É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏, —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏, –Ω–∞—Å–∏–ª–∏–µ)
- anger (–∑–ª–æ—Å—Ç—å, —è—Ä–æ—Å—Ç—å, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ)
- sadness (–≥—Ä—É—Å—Ç—å, –ø–µ—á–∞–ª—å, –¥–µ–ø—Ä–µ—Å—Å–∏—è)
- tired (—É—Å—Ç–∞–ª–æ—Å—Ç—å, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ, –∏—Å—Ç–æ—â–µ–Ω–∏–µ)
- provocation (–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏)
- generic (–æ–±—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ç–µ–º—ã —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º)
- neutral (–æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –±–µ–∑ —ç–º–æ—Ü–∏–π)

–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–û—Ç–≤–µ—Ç:"""

        response = client.chat.completions.create(
            model=OpenAIConfig.MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=OpenAIConfig.MAX_TOKENS,
            temperature=OpenAIConfig.TEMPERATURE
        )
        
        emotion = response.choices[0].message.content.strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π
        valid_emotions = ["sos", "anger", "sadness", "tired", "provocation", "generic", "neutral"]
        if emotion in valid_emotions:
            return emotion
        else:
            return "neutral"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–∏ —á–µ—Ä–µ–∑ GPT: {e}")
        
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        text_lower = text.lower()
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
        sos_keywords = ["–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å", "–ø–æ–∫–æ–Ω—á–∏—Ç—å", "—Å–∞–º–æ—É–±", "—Å—É–∏—Ü–∏–¥", "—É–±—å—é —Å–µ–±—è"]
        anger_keywords = ["–±–µ—Å–∏—Ç", "–∑–ª—é—Å—å", "—è—Ä–æ—Å—Ç—å", "—É–±–∏—Ç—å", "–¥–æ—Å—Ç–∞–ª–æ"]
        sadness_keywords = ["–≥—Ä—É—Å—Ç–Ω–æ", "—Ç—è–∂–µ–ª–æ", "–ø–µ—á–∞–ª—å", "—Ä–∞–∑–±–∏—Ç–æ", "–ø—É—Å—Ç–æ"]
        tired_keywords = ["—É—Å—Ç–∞–ª", "–≤—ã–≥–æ—Ä–µ–ª", "–Ω–µ—Ç —Å–∏–ª", "–∏–∑–º–æ—Ç–∞–Ω"]
        
        if any(keyword in text_lower for keyword in sos_keywords):
            return "sos"
        elif any(keyword in text_lower for keyword in anger_keywords):
            return "anger"
        elif any(keyword in text_lower for keyword in sadness_keywords):
            return "sadness"
        elif any(keyword in text_lower for keyword in tired_keywords):
            return "tired"
        else:
            return "neutral"



def load_system_prompt() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    prompt_path = Path(__file__).parent.parent / "prompts" / "system_prompt.txt"
    try:
        with open(prompt_path, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        return "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö."

async def chat_with_gpt(user_message, user_id=None, conversation_history=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GPT –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –¥–ª–∏–Ω–æ–π"""
    try:
        client = get_openai_client()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        emotion_type = detect_emotion_keywords(user_message)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context_type = analyze_conversation_context(conversation_history or [], user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        response_config = get_response_config(emotion_type, context_type)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        base_system_prompt = load_system_prompt()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –æ—Ç–≤–µ—Ç–∞
        style_instructions = get_style_instructions(response_config["style"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        enhanced_system_prompt = f"""{base_system_prompt}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –î–õ–ò–ù–ï –ò –°–¢–ò–õ–Æ –û–¢–í–ï–¢–ê:
{style_instructions}

–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: {response_config["description"]}
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {response_config["min_sentences"]}-{response_config["max_sentences"]}
"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = [{"role": "system", "content": enhanced_system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if conversation_history:
            messages.extend(conversation_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        response = client.chat.completions.create(
            model=OpenAIConfig.MODEL,
            messages=messages,
            max_tokens=response_config["max_tokens"],
            temperature=OpenAIConfig.TEMPERATURE
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: {emotion_type} + {context_type} = {response_config['max_tokens']} —Ç–æ–∫–µ–Ω–æ–≤")
        
        return response.choices[0].message.content
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ ü§ñ"

def close_openai_client():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI"""
    global _openai_client
    if _openai_client:
        try:
            # OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        finally:
            _openai_client = None