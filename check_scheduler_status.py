#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
from datetime import datetime, date, timedelta
from config import DatabaseConfig, SchedulerConfig

def check_scheduler_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DatabaseConfig.DB_PATH)
    cursor = conn.cursor()
    
    print("ü§ñ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    print(f"‚è∞ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {SchedulerConfig.DAILY_REMINDER_TIME}")
    print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {SchedulerConfig.ENABLE_DAILY_REMINDERS}")
    print(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {SchedulerConfig.TIMEZONE}")
    print("-" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    today = date.today().strftime('%Y-%m-%d')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    reminder_time = SchedulerConfig.DAILY_REMINDER_TIME
    reminder_datetime = f"{today} {reminder_time.hour:02d}:{reminder_time.minute:02d}"
    
    print(f"üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ {today}")
    print(f"üïê –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {reminder_datetime}")
    
    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ —Ä–∞–π–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (¬±30 –º–∏–Ω—É—Ç)
    start_time = f"{today} {reminder_time.hour:02d}:{max(0, reminder_time.minute-30):02d}"
    end_time = f"{today} {reminder_time.hour:02d}:{min(59, reminder_time.minute+30):02d}"
    
    cursor.execute("""
    SELECT user_id, message, created_at
    FROM messages 
    WHERE role = 'assistant' 
    AND created_at BETWEEN ? AND ?
    ORDER BY created_at ASC
    """, (start_time, end_time))
    
    reminder_messages = cursor.fetchall()
    
    if reminder_messages:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(reminder_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("\nüìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        
        for user_id, message, created_at in reminder_messages:
            short_message = message[:50] + "..." if len(message) > 50 else message
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: [{created_at}] {short_message}")
            
    else:
        print("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute("""
        SELECT COUNT(*) FROM messages 
        WHERE role = 'assistant' AND DATE(created_at) = ?
        """, (today,))
        
        bot_messages_today = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è: {bot_messages_today}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM messages")
    total_users = cursor.fetchone()[0]
    
    print(f"\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {total_users}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = (date.today() - timedelta(days=7)).strftime('%Y-%m-%d')
    cursor.execute("""
    SELECT COUNT(DISTINCT user_id) FROM messages 
    WHERE role = 'user' AND DATE(created_at) >= ?
    """, (week_ago,))
    
    active_users_week = cursor.fetchone()[0]
    print(f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users_week}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
    print(f"\nüìä –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
    
    for i in range(7):
        check_date = (date.today() - timedelta(days=i)).strftime('%Y-%m-%d')
        check_start = f"{check_date} {reminder_time.hour:02d}:{max(0, reminder_time.minute-30):02d}"
        check_end = f"{check_date} {reminder_time.hour:02d}:{min(59, reminder_time.minute+30):02d}"
        
        cursor.execute("""
        SELECT COUNT(*) FROM messages 
        WHERE role = 'assistant' 
        AND created_at BETWEEN ? AND ?
        """, (check_start, check_end))
        
        reminders_count = cursor.fetchone()[0]
        status = "‚úÖ" if reminders_count > 0 else "‚ùå"
        print(f"   {status} {check_date}: {reminders_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    print(f"\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
    
    current_time = datetime.now().time()
    if current_time < reminder_time:
        print(f"   ‚è≥ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ (—Å–µ–π—á–∞—Å {current_time.strftime('%H:%M')})")
    elif len(reminder_messages) == 0:
        print(f"   ‚ö†Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"      - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print(f"      - –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        print(f"      - –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram API")
    elif len(reminder_messages) < total_users:
        blocked_users = total_users - len(reminder_messages)
        print(f"   ‚ö†Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        print(f"      –í–æ–∑–º–æ–∂–Ω–æ {blocked_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞")
    else:
        print(f"   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    conn.close()

if __name__ == "__main__":
    check_scheduler_status()